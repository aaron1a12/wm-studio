// (c) Copyright 2015-2017 Wild Montage, Inc.

var fso = new ActiveXObject("Scripting.FileSystemObject");
var workingDirectory = fso.GetAbsolutePathName(".");

var currentSingleFolder = workingDirectory.split("\\");
if(currentSingleFolder[currentSingleFolder.length-1]=="scripts"){
	WScript.Echo("This script is intended to be opened by Studio only.");
	WScript.Quit(1);
}

// These strings can be found in notify.dll
var NOTIFY_PRE_WORK		= 102;
var NOTIFY_WORKSTART 	= 103;
var NOTIFY_WORKEND 		= 104;
var NOTIFY_PRESHUTDOWN1	= 105;
var NOTIFY_PRESHUTDOWN2	= 106;
var NOTIFY_SHUTDOWN		= 107;

//
// Constants
//

// A constant that specifies a daily trigger.
var TriggerTypeDaily = 2;

// The task gets triggered when it's registered.
var TriggerTypeRegistration = 7;

// A constant that specifies an executable action.
var ActionTypeExec = 0;

// A constant that the Task Scheduler either registers the task
// as a new task or as an updated version if the task already exists. 
var TASK_CREATE_OR_UPDATE = 6;

// User must already be logged on. The task will be run only in an
// existing interactive session.
var TASK_LOGON_INTERACTIVE_TOKEN  = 3;

//
// Task scheduler setup
//

// Create the TaskService object.
var service = new ActiveXObject( "Schedule.Service" );
service.Connect();

// Get the folders to create the task definitions in. 
var rootFolder
rootFolder = service.GetFolder("\\");

try{
	rootFolder.CreateFolder("\\Wild Montage");
}catch(e){
}
try{
	rootFolder.CreateFolder("\\Wild Montage\\Studio");
}catch(e){
}

var studioFolder = service.GetFolder("\\Wild Montage\\Studio");

//
// Function to reuse routine code
//

function addTask(name, stringResId, time, interval, duration, bStartIfMissed)
{	
	var bRepeat = false;
	
	if(typeof interval!="undefined" && typeof duration!="undefined")
		bRepeat = true;
	
	if(typeof bStartIfMissed!="boolean")
		bStartIfMissed = false;
	
	
	var TRIGGER_TYPE = TriggerTypeDaily;
	var bCheckStudio = false;
	
	if(name=="Check Studio"){
		TRIGGER_TYPE = TriggerTypeRegistration;
		bCheckStudio = true;
		time = "00:00:00";
	}
	
	var startTime = "2006-05-02T"+time; 
	//WScript.Echo(name +", "+ stringResId +", "+ time +", "+ interval +", "+ duration);
	
	
	//********************************************************
	// The taskDefinition variable is the TaskDefinition object.
	var taskDefinition
	// The flags parameter is 0 because it is not supported.
	taskDefinition = service.NewTask(0);

	//********************************************************
	// Define information about the task.

	// Set the registration info for the task by 
	// creating the RegistrationInfo object.
	var regInfo
	regInfo = taskDefinition.RegistrationInfo
	
	if(bCheckStudio){
		regInfo.Description = "Task generated by Studio. Checks up on Studio and tries to start it if not running.";
	}else{
		regInfo.Description = "Task generated by Studio. Alerts user to scheduled events.";
	}
	
	regInfo.Author = "Wild Montage Studio";

	// Set the task setting info for the Task Scheduler by
	// creating a TaskSettings object.
	var settings;
	settings = taskDefinition.Settings;
	settings.Enabled = true;
	settings.StartWhenAvailable = bStartIfMissed;
	settings.Hidden = false;

	//********************************************************
	// Create a daily trigger. Note that the start boundary 
	// specifies the time of day that the task starts and the 
	// interval specifies what days the task is run.
	var triggers;
	triggers = taskDefinition.Triggers;

	var trigger;
	
	trigger = triggers.Create(TRIGGER_TYPE);

	// Trigger variables that define when the trigger is active 
	// and the time of day that the task is run. The format of 
	// this time is YYYY-MM-DDTHH:MM:SS
	var startTime, endTime;

	//WScript.Echo("startTime :" + startTime);

	trigger.StartBoundary = startTime;
	//trigger.EndBoundary = endTime;
	if(bCheckStudio==false){
		trigger.DaysInterval = 1;    //Task runs every day.
		trigger.Id = "DailyTriggerId" + stringResId; // generate id
	}else{
		trigger.Id = "RegistrationTriggerId";
	}
	trigger.Enabled = true;

	if(bRepeat) {
		// Set the task repetition pattern for the task.
		// This will repeat the task 5 times.
		var repetitionPattern;
		repetitionPattern = trigger.Repetition;
		repetitionPattern.Duration = "PT"+duration+"M";
		repetitionPattern.Interval = "PT"+interval+"M";
	}else if(bCheckStudio) {
		var repetitionPattern;
		repetitionPattern = trigger.Repetition;
		repetitionPattern.Interval = "PT"+interval+"M";		
	}

	//***********************************************************
	// Create the action for the task to execute.

	// Add an action to the task to run notepad.exe.
	var Action;
	Action = taskDefinition.Actions.Create( ActionTypeExec );
	Action.Path = "rundll32.exe";
	
	if(bCheckStudio){
		Action.Arguments = "StudioClient.dll,checkStudio";
	}else if(typeof stringResId=="number"){
		Action.Arguments = "StudioClient.dll,notify "+Number(stringResId);
	}else if(typeof stringResId=="string"){
		Action.Arguments = "StudioClient.dll,"+stringResId;
	}
	
	Action.WorkingDirectory = workingDirectory;

	//WScript.Echo("Task definition created. About to submit the task...");

	//***********************************************************
	// Register (create) the task.

	studioFolder.RegisterTaskDefinition( name, taskDefinition, TASK_CREATE_OR_UPDATE, "", "", 3);	
}

//
// The notifications
//

// Don't change this name. Check every minute
addTask("Check Studio", null, null, 1);

addTask("Work warning", NOTIFY_PRE_WORK, "07:50:00");
addTask("Work time", NOTIFY_WORKSTART, "08:00:00");
addTask("Free time", NOTIFY_WORKEND, "16:00:00");
addTask("Shutdown ready", NOTIFY_PRESHUTDOWN1, "20:00:00");
addTask("Shutdown warning", NOTIFY_PRESHUTDOWN2, "20:50:00");

// Reset score at midnight
addTask("Reset score", "resetScore", "00:00:00");

// Repeat every 2 minutes for 60 minutes.
addTask("Shutdown alert", NOTIFY_SHUTDOWN, "21:00:00", 2, 60, true);

// Initiate shutdown procedure at 5 mins to 10:00 PM
addTask("Shutdown PC", "shutdownPC", "21:55:00");


// End of file